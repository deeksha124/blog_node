'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var express = require('express');
var pluralize = _interopDefault(require('pluralize'));
var _listRoutes = _interopDefault(require('express-list-routes'));
var camelCase = _interopDefault(require('lodash.camelcase'));

function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

var sanitizer = function sanitizer(path) {
  if (path === '/') return '';
  // remove slashes at start and end positions, if exists
  // to sure there is no any slashes.
  return path.replace(/^(\/+)(.)/, '$2').replace(/(.)(\/+)$/, '$1');
};
var normalizePath = function normalizePath() {
  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {
    paths[_key] = arguments[_key];
  }
  return paths.map(sanitizer).filter(Boolean).join('/');
};
var isResourceConfig = function isResourceConfig(opts) {
  return 'handlers' in opts;
};
var makePlaceholder = function makePlaceholder(name) {
  if (!name || name.startsWith(':')) {
    return name;
  }
  return ":" + name;
};
var makeCamelCase = function makeCamelCase() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  return camelCase(args.filter(Boolean).map(function (v) {
    return v.trim();
  }).join(' '));
};

var RESOURCES = {
  index: {
    method: 'get',
    suffix: false
  },
  show: {
    method: 'get',
    suffix: true
  },
  store: {
    method: 'post',
    suffix: false
  },
  update: {
    method: 'put',
    suffix: true
  },
  patch: {
    method: 'patch',
    suffix: true
  },
  destroy: {
    method: 'delete',
    suffix: true
  }
};

var RouteGroup = /*#__PURE__*/function () {
  function RouteGroup(path, router, middlewares) {
    if (path === void 0) {
      path = '';
    }
    if (router === void 0) {
      router = express.Router();
    }
    if (middlewares === void 0) {
      middlewares = [];
    }
    this.head = void 0;
    this.router = void 0;
    this.middlewares = void 0;
    this.head = path;
    this.router = router;
    this.middlewares = middlewares;
  }
  var _proto = RouteGroup.prototype;
  _proto.getRouter = function getRouter() {
    return this.router;
  };
  _proto.listRoutes = function listRoutes() {
    return _listRoutes(this.router, {
      logger: false
    });
  };
  _proto.group = function group() {
    for (var _len = arguments.length, rawArgs = new Array(_len), _key = 0; _key < _len; _key++) {
      rawArgs[_key] = arguments[_key];
    }
    var _this$parseGroupArgs = this.parseGroupArgs(rawArgs),
      middlewares = _this$parseGroupArgs.middlewares,
      register = _this$parseGroupArgs.register,
      _this$parseGroupArgs$ = _this$parseGroupArgs.prefix,
      prefix = _this$parseGroupArgs$ === void 0 ? '' : _this$parseGroupArgs$;
    var head = normalizePath(this.head, prefix);
    var group = new RouteGroup(head, this.router, [].concat(this.middlewares, middlewares));
    var proxy = this.createProxy(this.router, group);
    register(proxy);
    return this;
  };
  _proto.resource = function resource(arg) {
    var _this = this;
    var handlers = arg;
    var middlewares = {};
    var parameters = {};
    var base = this.head.split('/');
    var path = base.pop() || '';
    if (isResourceConfig(arg)) {
      handlers = arg.handlers;
      path = arg.path || '';
      middlewares = arg.middlewares || {};
      parameters = arg.parameters || {};
    }
    Object.entries(RESOURCES).forEach(function (_ref) {
      var endpoint = _ref[0],
        conf = _ref[1];
      if (!Reflect.has(handlers, endpoint)) {
        return;
      }
      var key = endpoint;
      var _ref2 = middlewares || {},
        _ref2$key = _ref2[key],
        midds = _ref2$key === void 0 ? [] : _ref2$key;
      // parse the path and generate parameter names
      var names = path.split('.').filter(Boolean).reduce(function (acc, segment) {
        var items = [pluralize.singular(segment), 'id'];
        if (parameters[segment]) {
          items = parameters[segment].split(':');
        }
        var placeholder = makePlaceholder(makeCamelCase.apply(void 0, items));
        acc.push.apply(acc, base.concat([segment, placeholder]));
        return acc;
      }, []);
      // if no need placeholder in last segment,
      // remove it.
      if (!conf.suffix) {
        names.pop();
      }
      // get the method from the router
      var fn = Reflect.get(_this.router, conf.method);
      if (typeof fn !== 'function') {
        throw new Error('Invalid method');
      }
      // get the handler from the resource
      var handler = handlers[endpoint];
      if (typeof handler !== 'function') {
        throw new Error('Handler is not a function');
      }
      var http = fn.bind(_this.router);
      http.apply(void 0, [names.join('/')].concat(_this.middlewares, [midds, handler.bind(handlers)]));
    });
    return this;
  };
  _proto.callRouter = function callRouter(arg) {
    var _this2 = this;
    return typeof arg === 'function' ? function (path) {
      var http = arg.bind(_this2.router);
      var route = normalizePath(_this2.head, path);
      for (var _len2 = arguments.length, inlineMiddlewares = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        inlineMiddlewares[_key2 - 1] = arguments[_key2];
      }
      http.apply(void 0, [route].concat(_this2.middlewares, inlineMiddlewares));
    } : this.router[arg];
  };
  _proto.createProxy = function createProxy(router, target) {
    var callRouter = this.callRouter.bind(target);
    var handler = {
      get: function get(_, prop) {
        return Reflect.has(target, prop) ? Reflect.get(target, prop) : callRouter(router[prop]);
      }
    };
    return new Proxy(this, handler);
  };
  _proto.parseGroupArgs = function parseGroupArgs(args) {
    switch (typeof args[0]) {
      case 'string':
        {
          var register = args.pop();
          return {
            prefix: args[0],
            register: register,
            middlewares: args.slice(1)
          };
        }
      case 'function':
        {
          var _register = args.pop();
          return {
            register: _register,
            middlewares: args
          };
        }
      default:
        throw new Error('invalid group parameters');
    }
  };
  return _createClass(RouteGroup, [{
    key: "path",
    get: function get() {
      return this.head;
    }
  }]);
}();

exports.default = RouteGroup;
//# sourceMappingURL=express-route-grouping.cjs.development.js.map
